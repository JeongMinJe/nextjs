// Prisma 스키마 파일 - Like, Comment 모델 추가
// User-Post 간 좋아요/댓글 관계를 정의합니다

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
  likes    Like[]     // 사용자가 누른 좋아요들
  comments Comment[]  // 사용자가 작성한 댓글들

  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  caption   String?  @db.Text
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  likes    Like[]    // 이 게시글의 좋아요들
  comments Comment[] // 이 게시글의 댓글들

  @@map("posts")
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  // 한 사용자는 같은 게시글에 좋아요를 한 번만 가능
  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id      String @id @default(cuid())
  content String @db.Text
  userId  String
  postId  String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("comments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}